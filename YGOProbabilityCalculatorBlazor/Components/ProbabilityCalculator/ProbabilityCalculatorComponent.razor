@using YGOProbabilityCalculatorBlazor.Models
@using YGOProbabilityCalculatorBlazor.Services
@implements IDisposable

<div class="container">
    <h3>Probability Calculator</h3>

    <div class="mb-4">
        <h4>Category Definitions</h4>
        <div class="row">
            <div class="col-4">
                <input @bind="newCategoryName" class="form-control" placeholder="Category name"/>
            </div>
            <div class="col-2">
                <button class="btn btn-primary" @onclick="AddCategoryBase">Add Category</button>
            </div>
        </div>
        <div class="mt-2">
            @foreach (var category in categoryBases) {
                <span class="badge bg-secondary me-2">
                    @category.Name
                    <button type="button" class="btn-close btn-close-white" aria-label="Close"
                            @onclick="() => RemoveCategoryBase(category)"></button>
                </span>
            }
        </div>
    </div>

    <div class="mb-4">
        <h4>Cards</h4>
        <div class="accordion" id="cardsAccordion">
            @foreach (var (card, index) in cards.Select((c, i) => (c, i))) {
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button @(index == activeCardIndex ? "" : "collapsed")"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#card@(index)">
                            Card @(index + 1) (@card.Copies copies)
                            @if (card.Categories.Any()) {
                                <span class="ms-2">-</span>
                                @foreach (var cat in card.Categories) {
                                    <span class="badge bg-info ms-1">@cat.Name</span>
                                }
                            }
                        </button>
                    </h2>
                    <div id="card@(index)"
                         class="accordion-collapse collapse @(index == activeCardIndex ? "show" : "")"
                         data-bs-parent="#cardsAccordion">
                        <div class="accordion-body">
                            <div class="row mb-3">
                                <div class="col-2">
                                    <input type="number"
                                           class="form-control"
                                           placeholder="Copies"
                                           min="1"
                                           value="@card.Copies"
                                           @onchange="@(e => UpdateCardCopies(index, int.Parse(e.Value?.ToString() ?? "1")))"/>
                                </div>
                                <div class="col-4">
                                    <select class="form-select" @bind="selectedCardCategory">
                                        <option value="">Add category...</option>
                                        @foreach (var cat in categoryBases.Where(c => !card.Categories.Contains(c))) {
                                            <option value="@cat.Name">@cat.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-2">
                                    <button class="btn btn-primary"
                                            @onclick="() => AddCategoryToCard(index)">
                                        Add Category
                                    </button>
                                </div>
                            </div>
                            <div>
                                @foreach (var category in card.Categories) {
                                    <span class="badge bg-info me-2">
                                        @category.Name
                                        <button type="button"
                                                class="btn-close btn-close-white"
                                                aria-label="Close"
                                                @onclick="() => RemoveCategoryFromCard(index, category)">
                                        </button>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" @onclick="AddNewCard">Add New Card</button>
        </div>
    </div>

    <div class="mb-4">
        <h4>Combos</h4>
        <div class="accordion" id="combosAccordion">
            @foreach (var (combo, index) in combos.Select((c, i) => (c, i))) {
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button @(index == activeComboIndex ? "" : "collapsed")"
                                type="button"
                                data-bs-toggle="collapse"
                                data-bs-target="#combo@(index)">
                            Combo @(index + 1)
                        </button>
                    </h2>
                    <div id="combo@(index)"
                         class="accordion-collapse collapse @(index == activeComboIndex ? "show" : "")"
                         data-bs-parent="#combosAccordion">
                        <div class="accordion-body">
                            <div class="row mb-3">
                                <div class="col-4">
                                    <select class="form-select" @bind="selectedCategoryBase">
                                        <option value="">Select category...</option>
                                        @foreach (var cat in categoryBases) {
                                            <option value="@cat.Name">@cat.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-2">
                                    <input @bind="newComboMin" type="number" class="form-control" placeholder="Min"/>
                                </div>
                                <div class="col-2">
                                    <input @bind="newComboMax" type="number" class="form-control" placeholder="Max"/>
                                </div>
                                <div class="col-2">
                                    <button class="btn btn-primary"
                                            @onclick="() => AddCategoryToCombo(index)">
                                        Add to Combo
                                    </button>
                                </div>
                            </div>
                            <div>
                                @foreach (var comboCategory in combo.Categories) {
                                    <span class="badge bg-info me-2">
                                        @comboCategory.BaseCategory.Name (@comboCategory.MinCount-@comboCategory.MaxCount)
                                        <button type="button"
                                                class="btn-close btn-close-white"
                                                aria-label="Close"
                                                @onclick="() => RemoveCategoryFromCombo(index, comboCategory)">
                                        </button>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" @onclick="AddNewCombo">Add New Combo</button>
        </div>
    </div>

    <div class="mb-4">
        <h4>Calculate Probability</h4>
        <div class="row g-3 align-items-center mb-3">
            <div class="col-2">
                <label for="handSize" class="col-form-label">Hand Size:</label>
            </div>
            <div class="col-2">
                <input type="number"
                       id="handSize"
                       class="form-control"
                       @bind="handSize"
                       min="1"/>
            </div>
            <div class="col-3">
                <button class="btn btn-primary"
                        @onclick="Calculate"
                        disabled="@(isCalculating || !CanCalculate)">
                    @if (isCalculating) {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-1">Calculating...</span>
                    }
                    else {
                        <span>Calculate</span>
                    }
                </button>
            </div>
        </div>

        @if (errorMessage is not null) {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        @if (probability is not null) {
            <div class="alert alert-primary" role="alert">
                <h5>Results:</h5>
                <p class="mb-0">Probability: @(probability.Value.ToString("P2"))</p>
            </div>
        }
    </div>
</div>

@code {
    private string newCategoryName = "";
    private readonly List<CategoryBase> categoryBases = [];
    private readonly List<Card> cards = [];
    private readonly List<Combo> combos = [];

    private int activeComboIndex = -1;
    private int activeCardIndex = -1;

    private string selectedCategoryBase = "";
    private int newComboMin;
    private int newComboMax;

    private string selectedCardCategory = "";

    private int handSize = 5;
    private bool isCalculating;
    private string? errorMessage;
    private double? probability;
    private readonly CancellationTokenSource cts = new();

    private bool CanCalculate =>
        cards.Count > 0 &&
        handSize > 0 &&
        handSize <= cards.Sum(c => c.Copies) &&
        combos.Count > 0 &&
        combos.All(c => c.Categories.Count > 0);

    private async Task Calculate() {
        if (!CanCalculate) return;

        try {
            isCalculating = true;
            errorMessage = null;
            probability = null;
            StateHasChanged();

            probability = await Task.Run(() => ProbabilityCalculator.CalculateProbabilityForCombos(
                cards,
                combos,
                handSize,
                cts.Token
            ), cts.Token);
        }
        catch (OperationCanceledException) {
            errorMessage = "Calculation was cancelled.";
        }
        finally {
            isCalculating = false;
        }
    }


    private void AddCategoryBase() {
        if (string.IsNullOrWhiteSpace(newCategoryName)) return;

        try {
            var categoryBase = new CategoryBase(newCategoryName);
            categoryBases.Add(categoryBase);
            newCategoryName = "";
        }
        catch (ArgumentException) {
            // Handle invalid input
        }
    }

    private void RemoveCategoryBase(CategoryBase category) {
        if (!combos.Any(c => c.Categories.Any(cc => cc.BaseCategory == category)) &&
            !cards.Any(c => c.Categories.Contains(category))) {
            categoryBases.Remove(category);
        }
    }

    private void AddNewCard() {
        cards.Add(new Card([]));
        activeCardIndex = cards.Count - 1;
    }

    private void UpdateCardCopies(int cardIndex, int copies) {
        if (copies < 1) copies = 1;
        var oldCard = cards[cardIndex];
        cards[cardIndex] = new Card(oldCard.Categories, copies);
    }

    private void AddCategoryToCard(int cardIndex) {
        if (string.IsNullOrEmpty(selectedCardCategory)) return;

        var categoryBase = categoryBases.FirstOrDefault(c => c.Name == selectedCardCategory);
        if (categoryBase == null) return;

        var oldCard = cards[cardIndex];
        if (!oldCard.Categories.Contains(categoryBase)) {
            cards[cardIndex] = new Card(
                oldCard.Categories.Concat([categoryBase]),
                oldCard.Copies
            );
        }

        selectedCardCategory = "";
    }

    private void RemoveCategoryFromCard(int cardIndex, CategoryBase category) {
        var oldCard = cards[cardIndex];
        cards[cardIndex] = new Card(
            oldCard.Categories.Where(c => c != category),
            oldCard.Copies
        );
    }

    private void AddNewCombo() {
        combos.Add(new Combo([]));
        activeComboIndex = combos.Count - 1;
    }

    private void AddCategoryToCombo(int comboIndex) {
        if (string.IsNullOrEmpty(selectedCategoryBase)) return;

        var categoryBase = categoryBases.FirstOrDefault(c => c.Name == selectedCategoryBase);
        if (categoryBase == null) return;

        try {
            var comboCategory = new ComboCategory(categoryBase, newComboMin, newComboMax);
            var combo = combos[comboIndex];

            var existingIndex = combo.Categories.FindIndex(c => c.BaseCategory.Name == categoryBase.Name);
            if (existingIndex >= 0) {
                combo.Categories[existingIndex] = comboCategory;
            }
            else {
                combo.Categories.Add(comboCategory);
            }

            selectedCategoryBase = "";
            newComboMin = 0;
            newComboMax = 0;
        }
        catch (ArgumentException) {
            // Handle invalid input
        }
    }

    private void RemoveCategoryFromCombo(int comboIndex, ComboCategory category) {
        combos[comboIndex].Categories.Remove(category);
    }

    void IDisposable.Dispose() {
        cts.Cancel();
        cts.Dispose();
    }
}

@using YGOProbabilityCalculatorBlazor.Models
@using YGOProbabilityCalculatorBlazor.Services.Interface
@using YGOProbabilityCalculatorBlazor.Components.Shared
@inject IDeckImportService _deckImportService
@inject ISessionService _sessionService
@inject IPendingSessionService _pendingSessionService
@inject IProbabilityCalculatorService _probabilityCalculator

<div class="container">
    <div class="d-flex mb-3">
        <button class="btn btn-primary me-2">
            <InputFile OnChange="@ImportDeckAsync" accept=".ydk" class="d-none" id="fileInput"/>
            <label for="fileInput" class="m-0" style="cursor: pointer;">Import Deck</label>
        </button>
        <button class="btn btn-secondary me-2" @onclick="SaveCurrentSession">
            Save Session
        </button>
        <button class="btn btn-secondary">
            <InputFile OnChange="@LoadSessionFile" accept=".json" class="d-none" id="sessionFileInput"/>
            <label for="sessionFileInput" class="m-0" style="cursor: pointer;">Load Session</label>
        </button>
    </div>

    <div class="mb-4">
        <div class="d-flex align-items-center">
            <label for="handSize" class="me-2 mb-0">Hand Size:</label>
            <input type="number"
                   id="handSize"
                   class="form-control"
                   style="width: 80px;"
                   @bind="handSize"
                   min="1"/>
        </div>
    </div>
    @if (importError is not null) {
        <DismissibleAlert Message="@importError" OnDismiss="@(() => importError = null)"/>
    }

    <CategoryListEditor
        CategoryBases="categoryBases"
        Combos="combos"
        Cards="cards"
    />

    <CardListEditor
        Cards="cards"
        CategoryBases="categoryBases"
        ActiveCardIndex="activeCardIndex"
        ActiveCardIndexChanged="@(i => activeCardIndex = i)"
        OnReplaceCard="ReplaceCard"
        OnRemoveCard="@(i => RemoveCard(i))"
        OnAddNewCard="AddNewCard"
    />

    <ComboListEditor
        Combos="combos"
        CategoryBases="categoryBases"
        ActiveComboIndex="activeComboIndex"
        ActiveComboIndexChanged="@(i => activeComboIndex = i)"
        OnReplaceCombo="ReplaceCombo"
        OnRemoveCombo="@(i => RemoveCombo(i))"
        OnAddNewCombo="AddNewCombo"
        HandSize="handSize"
    />

    <div class="results-section">
        <div class="col-3">
            <button class="btn btn-primary btn-lg w-100"
                    @onclick="Calculate"
                    disabled="@(isCalculating || !CanCalculate)">
                @if (isCalculating) {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="ms-1">Calculating...</span>
                }
                else {
                    <span>Calculate</span>
                }
            </button>
        </div>

        @if (errorMessage is not null) {
            <DismissibleAlert Message="@errorMessage" OnDismiss="@(() => errorMessage = null)"/>
        }

        @if (probability is not null) {
            <div class="alert alert-primary mt-3" role="alert">
                <h5>Results:</h5>
                <p class="mb-0">Probability: @(probability.Value.ToString("P2"))</p>
            </div>
        }
    </div>
</div>

@code {

    private readonly List<CategoryBase> categoryBases = [];
    private readonly List<Card> cards = [];
    private readonly List<Combo> combos = [];

    private int activeComboIndex = -1;
    private int activeCardIndex = -1;

    private int handSize = 5;
    private bool isCalculating;
    private string? errorMessage;
    private string? importError;
    private double? probability;

    private bool CanCalculate =>
        cards.Count > 0 &&
        handSize > 0 &&
        handSize <= cards.Sum(c => c.Copies) &&
        combos.Count > 0 &&
        combos.All(c => c.Categories.Count > 0);

    private Task ReplaceCard((int Index, Card NewCard) payload) {
        var (i, newCard) = payload;
        cards[i] = newCard;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void RemoveCard(int index) {
        if (index < 0 || index >= cards.Count) return;
        cards.RemoveAt(index);
        if (activeCardIndex == index) activeCardIndex = -1;
        else if (activeCardIndex > index) activeCardIndex--;
    }

    private void AddNewCard() {
        cards.Add(new Card([]));
        activeCardIndex = cards.Count - 1;
    }

    private Task ReplaceCombo((int Index, Combo NewCombo) payload) {
        var (i, newCombo) = payload;
        combos[i] = newCombo;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void RemoveCombo(int index) {
        if (index < 0 || index >= combos.Count) return;
        combos.RemoveAt(index);
        if (activeComboIndex == index) activeComboIndex = -1;
        else if (activeComboIndex > index) activeComboIndex--;
    }

    private void AddNewCombo() {
        combos.Add(new Combo(new List<ComboCategory>()));
        activeComboIndex = combos.Count - 1;
    }

    private async Task Calculate() {
        if (!CanCalculate) return;

        try {
            isCalculating = true;
            errorMessage = null;
            probability = null;
            StateHasChanged();

            probability = await Task.Run(() => _probabilityCalculator.CalculateProbabilityForCombos(
                cards,
                combos,
                handSize
            ));
        }
        catch (OperationCanceledException) {
            errorMessage = "Calculation was cancelled.";
        }
        finally {
            isCalculating = false;
        }
    }

    private async Task ImportDeckAsync(InputFileChangeEventArgs e) {
        try {
            importError = null;
            var importedCards = await _deckImportService.ImportDeckFromYdkAsync(e.File);

            cards.Clear();
            cards.AddRange(importedCards);
        }
        catch (Exception ex) {
            importError = $"Failed to import deck: {ex.Message}";
        }
    }

    private async Task SaveSession(string fileName) {
        try {
            var session = new SessionState {
                Categories = categoryBases,
                Cards = cards,
                Combos = combos,
                HandSize = handSize
            };

            await _sessionService.SaveSessionAsync(session, fileName);
        }
        catch (Exception ex) {
            errorMessage = $"Failed to save session: {ex.Message}";
        }
    }

    private async Task LoadSessionFile(InputFileChangeEventArgs e) {
        try {
            var file = e.File;
            using var streamReader = new StreamReader(file.OpenReadStream());
            var fileContent = await streamReader.ReadToEndAsync();

            var session = await _sessionService.LoadSessionAsync(fileContent);

            categoryBases.Clear();
            categoryBases.AddRange(session.Categories);

            cards.Clear();
            cards.AddRange(session.Cards);

            combos.Clear();
            combos.AddRange(session.Combos);

            handSize = session.HandSize;

            errorMessage = null;
        }
        catch (Exception ex) {
            errorMessage = $"Failed to load session: {ex.Message}";
        }
    }

    private async Task SaveCurrentSession() {
        var fileName = $"calculator_session_{DateTime.Now:yyyyMMdd_HHmmss}.json";
        await SaveSession(fileName);
    }

    protected override void OnInitialized() {
        if (_pendingSessionService.PendingSession is { } session) {
            try {
                categoryBases.Clear();
                categoryBases.AddRange(session.Categories);

                cards.Clear();
                cards.AddRange(session.Cards);

                combos.Clear();
                combos.AddRange(session.Combos);

                handSize = session.HandSize;

                _pendingSessionService.PendingSession = null;
            }
            catch (Exception ex) {
                errorMessage = $"Failed to load example session: {ex.Message}";
            }
        }

        base.OnInitialized();
    }

}